#include<iostream>
using namespace std;
long long int fib(int n,int x[]){
    long long int a[100000]={0},i;
    
    //For showing non-broken steps (any non-zero value can be applied)
    for(i=2;i<n;i++)
        a[i]=-1;
        
    // To return for n=1 & n=2 when there are no broken steps 
    a[0]=1,a[1]=2;
    
    //For showing broken steps (There are 0 ways to go ahead from this step)
    for(i=0;i<n;i++)
        if(x[i])
            a[i]=0;
            
    //If 1st step is broken & 2nd is not broken 
    if(!a[0]&&a[1])
        a[1]=1;
        
    //Using for loop (type of recursion) for computing number of ways to move forward
    for(i=2;i<n;i++)
        if(a[i]) //If the step is not broken
            a[i]=(a[i-1]+a[i-2])%1000000007;
     
    return a[n-1];
}

int main(){
    // Using b array for taking broken steps index.
    int n,m,i,b[100000],c[100000]={0};
    cin>>n>>m;
    
    for(i=0;i<m;i++){
        cin>>b[i];
        c[b[i]-1]=1; //To show step is broken at that index
    }
    
    cout<<fib(n,c);
    return 0;
}
